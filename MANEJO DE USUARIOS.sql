
-- **************************************************************** --
-- **************************************************************** --
-- **                 MANEJO DE USUARIOS                         ** --
-- **************************************************************** --
-- **************************************************************** --

-- **************************************************************** --
-- **                 CREACION DE USUARIOS                       ** --
-- **************************************************************** --

-- Linea que permite realizar operaciones de usuario
ALTER SESSION SET "_oracle_script" = true;

-- CREACION BÁSICA DE UN USUARIO
CREATE USER EJEMPLO4 IDENTIFIED BY 1234;

-- DECIR CUAL ES EL TABLESPACE QUE VA A USAR POR DEFECTO
CREATE USER EJEMPLO5 IDENTIFIED BY 1234
DEFAULT TABLESPACE USERS;

-- DECIR CUAL ES EL TABLESPACE TEMPORAL POR DEFECTO Y DAR CUOTA EN UN TABLESPACE
CREATE USER EJEMPLO6 IDENTIFIED BY 1234
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP
QUOTA 50M ON USERS;

-- CONCEPTOS VISTOS: CREAR USUARIO, CUÁL ES SU PASSWORD, CUAL ES SU TABLESPACE DE DATOS
--                   POR DEFECTO, CUAL ES SU TABLESPACE TEMPORAL Y ASIGNAR CUOTA EN UN
--                   TABLESPACE.

-- EJERCICIO:
-- EL USUARIO EJEMPLO4 SE CREÓ EN SU FORMA BÁSICA. VAMOS A CREAR UNA CONEXIÓN CON DICHO
-- USUARIO Y PROBAMOS LA CONEXIÓN. QUÉ SUCEDE?
-- SACA ERROR DE QUE EL USUARIO NO TIENE PERMISO PARA CONECTARSE A LA BASE DE DATOS.

-- DARLE AL USUARIO EJEMPLO4 PERMISO DE CONEXIÓN.
GRANT CREATE SESSION TO EJEMPLO4;
-- VOLVER A PROBAR LA CONEXION POR MEDIO DE EJEMPLO4.... FUNCIONÓ!

-- CONECTADO A EJEMPLO4:
-- CREAR UNA TABLA DE EMPLEADOS.... ERROR: NO TIENE PERMISO PARA CREAR TABLAS.

-- DESDE EJEMPLO2, VAMOS A DARLE PERMISOS PARA CREAR TABLAS
GRANT CREATE TABLE TO EJEMPLO4;

-- VOLVAMOS A ENSAYAR DESDE EJEMPLO4.....FUNCIONÓ.
-- DESDE EJEMPLO4, TRATEMOS DE INSERTARLE A LA NUEVA TABLA UN REGISTRO..... ERROR.
-- EL USUARIO EJEMPLO4 NO TIENE PERMISOS (NI CUOTA) PARA ESCRIBIR EN EL TABLESPACE USERS.

-- DESDE EJEMPLO2, ASIGNÉMOSLE CUOTA A DICHO USUARIO EN DICHO TABLESPACE
ALTER USER EJEMPLO4 QUOTA 10M ON USERS;

--VOLVAMOS A ENSAYAR A INSERTAR EL REGISTRO DESDE EJEMPLO4....FUNCIONÓ.

-- POR QUE PARA CREAR UNA TABLA NO SE NECESITA QUOTA EN EL TABLESPACE, Y SÍ PARA
-- INSERTARLE DATOS? PORQUE LA DEFINICION DE LA TABLA SE GUARDA EN EL DICCIONARIO DE
-- DATOS, EL CUAL ESTÁ EN EL TABLESPACE SYSTEM.

-- EJERCICIO
-- DESDE EJEMPLO2
CREATE USER EJEMPLO7 IDENTIFIED BY 1234
ACCOUNT LOCK;

-- CREEMOS CONEXIÓN DE EJEMPLO7... AL PROBAR LA CONEXIÓN, DICE QUE LA CUENTA ESTÁ
-- BLOQUEADA.

-- DESDE EJEMPLO2
ALTER USER EJEMPLO7 
ACCOUNT UNLOCK;

-- PROBAR CONEXIÓN CON EJEMPLO7.... YA DICE QUE NO TIENE PERMISO DE CONEXIÓN.

-- LA OPCIÓN DE BLOQUEAR UNA CUENTA (ACCOUNT LOCK) TIENE EFECTO EN LA SIGUIENTE CONEXION
-- DEL USUARIO. SI BLOQUEAMOS UNA CUENTA, Y EL USUARIO ESTÁ CONECTADO EN ESOS MOMENTOS,
-- NO TENDRÁ EFECTO EN DICHA SESIÓN. CÓMO HACER PARA QUE EL BLOQUEO DE UNA CUENTA TENGA
-- EFECTO INMEDIATO?
-- CERCIORARNOS DE QUE ESTAMOS CONECTADOS CON EL USUARIO EJEMPLO7

ALTER USER EJEMPLO7 ACCOUNT LOCK;

select SID, SERIAL#, username, osuser, machine 
from v$session 
where username = 'EJEMPLO7';  -- SID = 271 Y SERIAL# = 54617

ALTER SYSTEM KILL SESSION '271,54617';

-- EJERCICIO
-- DESDE EJEMPLO2
CREATE USER EJEMPLO8 IDENTIFIED BY 1234
PASSWORD EXPIRE;

-- CREAR CONEXION PARA EJEMPLO8 .... ERROR, NO TIENE PERMISOS DE CONEXIÓN.

-- DESDE EJEMPLO2
GRANT CREATE SESSION TO EJEMPLO8;

-- ENSAYAR DE NUEVO LA CONEXION CON EJEMPLO8.... DICE QUE LA CONTRASEÑA SE HA VENCIDO.
-- OBLIGA AL USUARIO A MODIFICAR LA CONTRASEÑA. ESTA MODIFICACIÓN HAY QUE HACERLA POR
-- SQL PLUS, ENTRANDO CON EL USUARIO EJEMPLO8.

-- EN REALIDAD, LA CLÁUSULA PASSWORD EXPIRE NO TIENE MUCHO SENTIDO AL CREAR UN NUEVO
-- USUARIO. TIENE SENTIDO CON LA CLÁUSULA ALTER USER, PARA PERMITIR OBLIGAR AL USUARIO 
-- A QUE CAMBIE SU PASSWORD, DESPUES DE UN TIEMPO.

-- **************************************************************** --
-- **                 BORRADO DE USUARIOS                        ** --
-- **************************************************************** --
-- BORRAR EL USUARIO EJEMPLO5
-- DESDE EJEMPLO2
DROP USER EJEMPLO5;  -- SIN PROBLEMAS, EL USUARIO EJEMPLO5 HA SIDO BORRADO.
                     -- VERIFICARLO, CREANDO UNA CONEXION PARA EJEMPLO5.

-- BORRAR EL USUARIO EJEMPLO4
DROP USER EJEMPLO4;  -- SACA ERROR.... POR QUÉ? MIENTRAS EJEMPLO5 NO TENÍA OBJETOS CREADOS,
                     -- EJEMPLO4 SÍ LOS TIENE, TIENE UNA TABLA. EL BORRADO DE UN USUARIO
                     -- QUE TIENE OBJETOS YA GRABADOS SE HACE DE LA SIGUIENTE MANERA:
DROP USER EJEMPLO4 CASCADE;   -- FUNCIONÓ.

-- **************************************************************** --
-- **************************************************************** --
-- **        GESTION DE PERMISOS / PRIVILEGIOS                   ** --
-- **************************************************************** --
-- **************************************************************** --
-- DAR PERMISOS   : GRANT
-- QUITAR PERMISOS: REVOKE

-- YA VIMOS COMO EJEMPLO2 LE DIO PERMISOS A EJEMPLO4 PARA CONECTARSE A LA BASE DE DATOS Y
-- PARA CREAR TABLAS. POR QUÉ NO LE TUVO QUE DAR PERMISOS PARA INSERTAR DATOS EN DICHA
-- TABLA?

-- EJERCICIO 1
-- DESDE EJEMPLO2
CREATE TABLE SUCURSAL
(CODIGO NUMBER PRIMARY KEY,
NOMBRE VARCHAR2(30) NOT NULL,
TELEFONO NUMBER);

INSERT INTO SUCURSAL VALUES (10,'POBLADO',5612098);
INSERT INTO SUCURSAL VALUES (20,'CENTRO',7120945);
COMMIT;

-- DESDE EJEMPLO8, HACER UN SELECT A ESTA TABLA....
SELECT * FROM EJEMPLO2.SUCURSAL;
-- SACA ERROR.....DICE QUE LA TABLA NO EXISTE.

--DESDE EJEMPLO2, OTORGUEMOS EL PERMISO NECESARIO
GRANT SELECT ON SUCURSAL TO EJEMPLO8;

-- LUEGO, INTENTAR DE NUEVO A HACER EL SELECT POR EJEMPLO8... FUNCIONÓ!

-- EJERCICIO 2
-- DESDE EJEMPLO2
CREATE TABLE GERENTE
(CEDULA NUMBER PRIMARY KEY,
NOMBRE VARCHAR(30) NOT NULL,
SUELDO NUMBER);

INSERT INTO GERENTE VALUES (1,'LUIS CALLE',4500000);
INSERT INTO GERENTE VALUES (2,'CAROLINA MESA',7500000);
COMMIT;

-- QUEREMOS QUE EL USUARIO EJEMPLO8 PUEDA CONSULTAR LA CEDULA Y EL NOMBRE DE LOS
-- GERENTES, PERO NO SU SUELDO.
GRANT SELECT(CEDULA,NOMBRE) ON GERENTE TO EJEMPLO8;  -- ESTO NO SE PUEDE
-- SE HACE A TRAVES DE UNA VISTA
CREATE VIEW VISTA1 AS
  SELECT CEDULA, NOMBRE
  FROM GERENTE;
  
GRANT SELECT ON VISTA1 TO EJEMPLO8;

-- AHORA, EJEMPLO8 SOLO PUEDE HACERLE SELECT A LA VISTA.

-- QUEREMOS QUE EJEMPLO8 PUEDA ACTUALIZAR EL NOMBRE DE UN GERENTE. NO LE ES PERMITIDO
-- ACTUALIZAR LA CEDULA NI EL SUELDO DEL GERENTE.
-- DESDE EJEMPLO2
GRANT UPDATE(NOMBRE) ON EJEMPLO2.GERENTE TO EJEMPLO8;

-- DESDE EJEMPLO8
UPDATE EJEMPLO2.GERENTE
  SET SUELDO = 6000000
  WHERE CEDULA = 1;  -- PRIVILEGIOS INSUFICIENTES
  
UPDATE EJEMPLO2.GERENTE
  SET NOMBRE = 'LUIS CALLE MARIN'
  WHERE CEDULA = 1;   -- OJO: NO FUNCIONA.....PRIVILEGIOS INSUFICIENTES...... POR QUE?
  
UPDATE EJEMPLO2.GERENTE
  SET NOMBRE = 'LUIS CALLE MARIN';  -- SÍ FUNCIONA.... POR QUE?
                                    -- EL UPDATE ANTERIOR NO FUNCIONA PORQUE PARA HACERLO
                                    -- SE REQUIERE PERMISOS PARA HACER SELECT SOBRE LA 
                                    -- TABLA. EN CAMBIO ESTE ULTIMO UPDATE NO LO REQUIERE
                                    -- Y POR ESO FUNCIONA.
GRANT SELECT ON GERENTE TO EJEMPLO8;

-- VOLVER A ENSAYAR EL PENÚLTIMO UPDATE... FUNCIONA

-- EJERCICIO 3
-- A EJEMPLO3 DARLE TODOS LOS PRIVILEGIOS
GRANT ALL PRIVILEGES TO EJEMPLO3;

-- DESDE EJEMPLO3, HACER LO QUE YA HA HECHO EJEMPLO8 SOBRE LA TABLA GERENTE.... FUNCIONA
-- DE HECHO, EJEMPLO3 TAMBIEN PUEDE MODIFICARLE EL SUELDO A ALGUN GERENTE.

-- EJERCICIO4
-- A EJEMPLO7 DARLE PERMISO DE INSERTAR DATOS EN CUALQUIER TABLA.
GRANT CREATE SESSION TO EJEMPLO7;
GRANT INSERT ANY TABLE TO EJEMPLO7;

-- DESDE EJEMPLO7, TRATAR DE INSERTAR DATOS A LA TABLA GERENTE.... 

INSERT INTO EJEMPLO2.GERENTE VALUES (3,'CAMILA PEÑA',6500000);  -- FUNCIONA

-- ENSAYAR, DESDE EJEMPLO7, ACTUALIZAR DATOS EN GERENTE..... NO FUNCIONA NINGUNO DE LOS
-- DOS UPDATES.

UPDATE EJEMPLO2.GERENTE
SET NOMBRE = 'LUIS VELEZ'
WHERE CEDULA= 1;

UPDATE EJEMPLO2.GERENTE
  SET NOMBRE = 'LUIS CALLE MARIN';

-- GRANT ... WITH GRANT OPTION

CREATE USER EJEMPLO10 IDENTIFIED BY 1234 QUOTA 5M ON USERS;
GRANT CREATE SESSION TO EJEMPLO10;

GRANT INSERT ON PRODUCTO TO EJEMPLO10;  -- SIN WITH GRANT OPTION

-- DESDE EJEMPLO10
INSERT INTO EJEMPLO2.PRODUCTO VALUES(1001,'BLANQUEADOR',30,50,12,NULL,NULL,NULL); -- BIEN

GRANT INSERT ON EJEMPLO2.PRODUCTO TO EJEMPLO3; -- NO LO DEJA....

-- DESDE EJEMPLO2
GRANT INSERT ON PRODUCTO TO EJEMPLO10 WITH GRANT OPTION;

-- DESDE EJEMPLO10
GRANT INSERT ON EJEMPLO2.PRODUCTO TO EJEMPLO3; -- FUNCIONÓ, POR EL WITH GRANT OPTION

-- EN ESTE MOMENTO, EJEMPLO10 Y EJEMPLO3 TIENEN PERMISO DE HACER INSERT EN PRODUCTO.
-- DESDE EJEMPLO3
INSERT INTO EJEMPLO2.PRODUCTO VALUES(1002,'BLANQUEADOR',30,50,12,NULL,NULL,NULL);  -- BIEN

-- QUÉ SUCEDE SI LE QUITAMOS EL PRIVILEGIO A EJEMPLO10. SE LE QUITARÁ TAMBIEN A EJEMPLO3?
REVOKE INSERT ON PRODUCTO FROM EJEMPLO10;
-- DESDE EJEMPLO10
INSERT INTO EJEMPLO2.PRODUCTO VALUES(1003,'BLANQUEADOR',30,50,12,NULL,NULL,NULL);  -- ERROR
-- DESDE EJEMPLO3
INSERT INTO EJEMPLO2.PRODUCTO VALUES(1003,'BLANQUEADOR',30,50,12,NULL,NULL,NULL);  -- FUNCIONÓ

-- A EJEMPLO7 QUITARLE EL PERMISO RECIEN ASIGNADO.
REVOKE INSERT ANY TABLE FROM EJEMPLO7;

-- ENSAYAR A CREAR UN NUEVO GERENTE DESDE EJEMPLO7.... YA NO TIENE PERMISOS.

REVOKE SELECT ON GERENTE FROM EJEMPLO8;

REVOKE UPDATE ON EJEMPLO2.GERENTE FROM EJEMPLO8;

-- **************************************************************** --
-- **************************************************************** --
-- **                   GESTION DE ROLES                         ** --
-- **************************************************************** --
-- **************************************************************** --

-- ROL: AGRUPACIÓN DE PRIVILEGIOS
CREATE ROLE GERENCIA;

-- ASIGNACIÓN DE PRIVILEGIOS A ROLES (ES IGUAL QUE A UN USUARIO)
GRANT SELECT,UPDATE ON GERENTE TO GERENCIA;

-- ASIGNARLE UN ROL A UN USUARIO
CREATE USER EJEMPLO9 IDENTIFIED BY 1234 QUOTA 50M ON USERS;
GRANT CREATE SESSION TO EJEMPLO9;
GRANT GERENCIA TO EJEMPLO9;

-- DESDE EJEMPLO9, MIREMOS SI HAY PERMISOS DE CONSULTAR Y ACTUALIZAR LA TABLA GERENTE.
SELECT * FROM EJEMPLO2.GERENTE;

UPDATE EJEMPLO2.GERENTE
SET SUELDO = 6000000
WHERE CEDULA = 2;   -- AMBAS INSTRUCCIONES FUNCIONAN.

DELETE FROM EJEMPLO2.GERENTE
WHERE CEDULA = 2;

INSERT INTO EJEMPLO2.GERENTE VALUES
(5,'LINA HERNANDEZ',1200000);  -- AMBAS INSTRUCCIONES NO FUNCIONAN.

-- QUITARLE UN ROL A UN USUARIO
REVOKE GERENCIA FROM EJEMPLO9;

-- TRATAR DE HACER UN SELECT A LA TABLA DESDE EJEMPLO9. ESTE REVOKE TIENE EFECTO DESDE LA
-- PROXIMA SESION DEL USUARIO. SI EJEMPLO9 SE ENCUENTRA CONECTADO, CUANDO LE QUITAN EL ROL,
-- AUN LO SIGUE DEJANDO HACER LAS OPERACIONES.

-- AL ROL LLAMADO GERENCIA, QUITARLE UNO DE LOS DOS PRIVILEGIOS.
-- VOLVAMOS A ASIGNARLE A EJEMPLO9 EL ROL GERENCIA

GRANT GERENCIA TO EJEMPLO9;

REVOKE UPDATE ON GERENTE FROM GERENCIA; -- AL TRATAR DE HACER UN UPDATE DESDE EJEMPLO9,
                                        -- YA NO DEJA.

-- EJERCICIO 1
-- COMBINACION DE PRIVILEGIOS
CREATE ROLE ADMINISTRADOR;

GRANT CREATE SESSION, CREATE TABLE, SELECT ON GERENTE TO ADMINISTRADOR;  -- SACA ERROR
GRANT CREATE SESSION, CREATE TABLE TO ADMINISTRADOR;
GRANT SELECT ON GERENTE, INSERT ON PRODUCTO TO ADMINISTRADOR; -- SACA ERROR
GRANT SELECT,INSERT ON GERENTE TO ADMINISTRADOR;

-- BORRAR UN ROL
DROP ROLE ADMINISTRADOR;

-- **************************************************************** --
-- **************************************************************** --
-- **            UN POCO DE DICIONARIO DE DATOS                  ** --
-- **************************************************************** --
-- **************************************************************** --
-- USUARIOS
SELECT * FROM DBA_USERS WHERE USERNAME='EJEMPLO2';
-- ACCOUNT_STATUS
-- EXPIRY_DATE
-- DEFAULT_TABLESPACE
-- TEMPORARY_TABLESPACE
-- CREATED
-- PROFILE
-- LAST_LOGIN
-- PASSWORD_CHANGE_DATE

-- ROLES
SELECT * FROM DBA_ROLES WHERE ROLE = 'GERENCIA';

SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'GERENCIA';

SELECT * FROM DBA_TAB_PRIVS WHERE GRANTEE = 'GERENCIA';

-- QUÉ PRIVILEGIOS TIENE UN USUARIO?
SELECT * FROM DBA_SYS_PRIVS WHERE GRANTEE = 'EJEMPLO8';  -- PRIVILEGIOS DE SISTEMA

SELECT * FROM DBA_TAB_PRIVS WHERE GRANTEE = 'EJEMPLO8';  -- PRIVILEGIOS DE OBJETOS

SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTEE = 'EJEMPLO9';  -- ROLES DE UN USUARIO

-- **************************************************************** --
-- **************************************************************** --
-- **                        PERFILES                            ** --
-- **************************************************************** --
-- **************************************************************** --
-- Recuerden cual es la diferencia entre roles y perfiles.
-- Los roles son grupos de permisos sobre objetos lógicos de la base de datos.
-- Los perfiles son grupos de restricciones sobre objetos físicos o recursos del
-- sistema y/o base de datos.

-- Los perfiles solo tienen efecto (o funcionan) cuando los límites a los recursos
-- están habilitados. Eso se hace con el parámetro resource_limit. Miremos
-- qué valor tiene dicho parámetro.

show parameter resource_limit

-- Dicho parámetro debe estar en TRUE para que los perfiles funcionen. Si esta
-- en falso, cambiemos su valor:
ALTER SYSTEM SET RESOURCE_LIMIT = TRUE;

-- Qué tipos de parámetros podemos configurar en un perfil?
-- Dos tipos de parámetros:
--    Parámetros de recursos del sistema
--    Parámetros referentes al password

-- EJEMPLO DE PERFIL CON PARÁMETROS DE RECURSOS DEL SISTEMA
CREATE PROFILE perfil20 LIMIT
SESSIONS_PER_USER 2
IDLE_TIME 3
CONNECT_TIME 4;  -- RECURSOS DEL SISTEMA

-- Crear un nuevo usuario y asignarle el perfil recién creado.

CREATE USER perfiles IDENTIFIED BY 1234;

ALTER USER perfiles PROFILE perfil20;
GRANT ALL PRIVILEGES TO perfiles;

-- Conectarnos a ese usuario por sqlplus y verificar su comportamiento según el perfil
-- asignado.
--      Tratemos de abrir 3 sesiones con el mismo usuario. ¿Qué sucede?
--      Creemos una tabla, luego estemos inactivos durante más de 5 minutos
--       y luego tratemos de crear otra tabla. ¿Qué sucede?
--      Hagamos actividades (crear tablas, alterar tablas, insertar datos, etc.)
--       durante más de 5 minutos. ¿Qué sucede después de los 5 minutos?

-- Vamos a mirar en el diccionario de datos donde quedo grabado el perfil.
-- Hacerlo por el usuario SYS.

SELECT PROFILE, RESOURCE_NAME, LIMIT
FROM DBA_PROFILES
WHERE PROFILE = 'PERFIL20';

-- BORRAR EL PERFIL perfil20
DROP PROFILE perfil20;  -- ERROR

DROP PROFILE perfil20 CASCADE;  -- FUNCIONÓ

-- EJEMPLO DE PERFIL CON PARÁMETROS DE PASSWORD

ALTER PROFILE perfil20 LIMIT
FAILED_LOGIN_ATTEMPTS 2;

-- Descubramos que hace este parámetro:
-- En otra consola tratemos de entrar con el usuario perfiles, equivocándonos
-- UNA sola vez en el password A la segunda vez, nos deja entrar,
-- poniendo el password correcto.
-- Luego de salirnos de sqlplus, tratemos de conectarnos al usuario perfiles,
-- equivocándonos DOS veces en el password.Y a la tercera vez,
-- coloquemos el password correcto..Que sucede?
-- Cuántos intentos de conexión errados puedo tener, antes de que la cuenta o el 
-- usuario se bloquee.

-- Desbloqueemos la cuenta perfiles
ALTER USER perfiles ACCOUNT UNLOCK;

ALTER PROFILE perfil20 LIMIT
PASSWORD_LIFE_TIME 2/1440;

-- Miremos que hace este parámetro:
-- En otra consola, conectémonos con el usuario perfiles. No sucede nada
-- extraordinario..
-- Salgamos de sqlplus y volvamos a entrar, otra vez, con el usuario perfiles.
-- No sucede nada extraordinario..
-- Ahora, salgámonos de sqlplus, esperemos 5 minutos y volvamos a entrar con
-- el usuario perfiles ¿Que sucede?
-- Para que sirve PASSWORD_LIFE_TIME?
-- Cambiémosle el password al usuario perfiles. Y luego volvamos a entrar
-- con dicho usuario. ¿Qué sucede?

-- PASSWORD_GRACE_TIME
-- PASSWORD_REUSE_MAX
-- PASSWORD_REUSE_TIME